{
	"_.?" : {
		"toptitle" : [],
		"api" : [
			""
		],
		"param" : [
			[]
		],
		"paramcall" : [
			[]
		],
		"returnval" : [
			[]
		],
		"info" : [
			""
		],
		"infowarning":[
		],
		"example":[
			{ 
				"info":"",
				"code":[
					""
				],
				"result":[
					""
				]
			}
		
		]
	},

	"_.extend" : {
		"toptitle" : ["_.extend"],
		"api" : [
			"_.extend(proto,extobj,notThisproperty)"
		],
		"param" : [
			["proto","[ 类型:Object ]"],
			["extendobj","[ 类型:Object ]"],
			["notThisproperty","[ 类型:String,Array ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["proto or null","[ 返回proto参数对象,或者为空 ]"]
		],
		"info" : [
			"_.extend 函数有两个作用.",
			"1. 在 _ (工具库) 上扩展自定义方法",
			"2. 合并对象，并且可以筛选不需要附加的属性",
			"_.extend 底层调用了_.compose"
		],
		"infowarning":[
		],
		"example":[
			{ 
				"info":"在 _ 扩展方法，使其可以随处调用",
				"code":[
				".extend({",
				"  hello: function(data){",
				"    console.log('hello '+data);",
				"  }",
				"});",
				"",
				"_.hello('aix');"
				],
				"result":[
					"hello aix"
				]
			},
			{ 
				"info":"合并b对象的所有属性到a对象",
				"code":[
				"var a = { a:1 , c:3 };",
				"var b = { a:2 , b:1 };",
				"",
				"_.extend(a,b);",
				"",
				"console.log(a);",
				"console.log(b);"
				],
				"result":[
				"{ a:2,c:3,b:1 }",
				"{ a:2,b:1 }"
				]
			},
			{ 
				"info":"合并b对象的所有属性到a对象 . 并且忽略b对象上的a属性",
				"code":[
				"var a = { c:3 };",
				"var b = { a:2 , b:1 };",
				"",
				"_.extend(a,b,'a'); ",
				"",
				"//合并时忽略了b中的a属性",
				"console.log(a);",
				"console.log(b);"
				],
				"result":[
				"{ c:3,b:1 }",
				"{ a:2,b:1 }"
				]
			}
		]
	},

	"_.define" : {
		"toptitle" : ["_.define"],
		"api" : [
			"_.define(obj,prop,setting)",
			"_.define(obj,setting)"
		],
		"param" : [
			["obj","[ 类型:Object ]"],
			["prop","[ 类型:String , Number ]"],
			["setting","[ 类型:Object ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"_.define 用于给指定的Object对象定义属性,并且可以设置该属性的参数"
		],
		"infowarning":[
		],
		"example":[
			{ 
				"info":"_.define 可以定义单个属性，也可以一次性定义多个属性",
				"code":[
				"var a = {};",
				"",
				"_.define(a,'a',{",
				"  value : 1,",
				"  enumerable: false,",
				"  configurable: false,",
				"  writable: true",
				"});",
				"",
				"console.log(a.a);",
				"",
				"_.define(a,{",
				"  'b':{",
				"    value : 2,",
				"    enumerable: true,",
				"    configurable: true,",
				"    writable: true",
				"  },",
				"  'c':{",
				"    value : 3,",
				"    enumerable: true,",
				"    configurable: true,",
				"    writable: true",
				"  },",
				"});",
				"",
				"console.log(a.b,a.c);"
				],
				"result":[
					"1",
					"2,3"
				]
			},
			{ 
				"info":"定义属性时,设置enumerable configurable writable",
				"code":[
				"var a = {};",
				"",
				"_.define(a,'a',{",
				"  value : 1,",
				"  enumerable: false,",
				"  configurable: false,",
				"  writable: false",
				"});",
				"",
				"console.log(a.a===1);",
				"",
				"//无法设置a.a的数值，因为writable定义为false",
				"a.a = 4;",
				"console.log(a.a);"
				],
				"result":[
					"true",
					"1"
				]
			}
		]
	},

	"_.typeof" : {
		"toptitle" : ["_.typeof"],
		"api" : [
			"_.typeof(varible)"
		],
		"param" : [
			["varible","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["typestring","[ 类型字符串 ]"]
		],
		"info" : [
			"_.typeof 用于准确的检测变量类型，并且返回当前变量类型对应的字符串(小写)"
		],
		"infowarning":[
		],
		"example":[
			{ 
				"info":"使用typeof来检测出变量的类型",
				"code":[
				"console.log(_.typeof(1))",
				"console.log(_.typeof('1'))",
				"console.log(_.typeof([]))",
				"console.log(_.typeof({}))",
				"console.log(_.typeof(true))",
				"console.log(_.typeof(/reg/g))",
				"console.log(_.typeof(null))",
				"console.log(_.typeof(undefined))",
				"console.log(_.typeof(new Date))",
				"console.log(_.typeof(function(){}))"
				],
				"result":[
				"&gt;  number",
				"&gt;  string",
				"&gt;  array",
				"&gt;  object",
				"&gt;  boolean",
				"&gt;  regexp",
				"&gt;  null",
				"&gt;  undefined",
				"&gt;  date",
				"&gt;  function"
				]
			}
		
		]
	},

	"_.isObject" : {
		"toptitle" : ["_.isObject"],
		"api" : [
			"_.isObject(varible)"
		],
		"param" : [
			["varible","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["boolean","[ 是否为对象-布尔值 ] "]
		],
		"info" : [
			"_.isObject 检测变量类型是否为对象类型"
		],
		"infowarning":[
			"Js 中的大多数变量类型都属于对象,比如数组,这也是为什么在Js中有“一切皆对象”的说法"
		],
		"example":[
			{ 
				"info":"使用isObject来检测出变量的类型",
				"code":[
				"console.log(_.isObject(1))",
				"console.log(_.isObject('1'))",
				"console.log(_.isObject([]))",
				"console.log(_.isObject({}))",
				"console.log(_.isObject(true))",
				"console.log(_.isObject(/reg/))",
				"console.log(_.isObject(null))",
				"console.log(_.isObject(undefined))",
				"console.log(_.isObject(new Date))",
				"console.log(_.isObject(function(){}))",
				"console.log(_.isObject(new String('a')))",
				"console.log(_.isObject(new uNumber(1)))"
				],
				"result":[
				"&gt;  false",
				"&gt;  false",
				"&gt;  true",
				"&gt;  true",
				"&gt;  false",
				"&gt;  true",
				"&gt;  false",
				"&gt;  false",
				"&gt;  true",
				"&gt;  true",
				"&gt;  true",
				"&gt;  true"
				]
			}
		
		]
	},

	"_.is*" : {
		"toptitle" : ["_.is*"],
		"api" : [
		"_.isFunction(varible)",
		"_.isBoolean(varible)",
		"_.isString(varible)",
		"_.isNumber(varible)",
		"_.isNull(varible)",
		"_.isDate(varible)",
		"_.isRegExp(varible)",
		"_.isNodelist(varible)",
		"_.isUndefined(varible)",
		"_.isHTMLCollection(varible)"
		],
		"param" : [
			["varible","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["boolean","[ 是否为该类型-布尔值 ]"]
		],
		"info" : [
			"_.is* 检测变量类型是否与指定类型匹配，返回布尔值"
		],
		"infowarning":[
			"非必要时,使用用_.is*效率远高于 _.typeof"
		],
		"example":[
			{ 
				"info":"使用isFunction来检测出变量的类型",
				"code":[
					"console.log(_.isFunction([]))"
				],
				"result":[
					"false"
				]
			}
		
		]
	},

	"_.NULL" : {
		"toptitle" : ["_.NULL"],
		"api" : [
			"_.NULL(?)"
		],
		"param" : [
			["?","任意类型,没有意义"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"_.NULL为一个空函数，一个无用的指针"
		],
		"infowarning":[
			"可以将无用函数,空函数都指向_.NULL,作用和jQuery.noop等同,从而减少创建无用匿名函数的次数,编译器也不会GC"
		],
		"example":[
		]
	},

	"_.root" : {
		"toptitle" : ["_.root"],
		"api" : [
			"_.root"
		],
		"param" : [
		],
		"paramcall" : [
		],
		"returnval" : [
			["Window Object","[ 浏览器宿主环境下指向window ]"]
		],
		"info" : [
			"_.root 在浏览器环境下指向window对象,具体数值视宿主环境而定"
		],
		"infowarning":[
		],
		"example":[
		]
	},

	"_.broken" : {
		"toptitle" : ["_.broken"],
		"api" : [
			"_.broken"
		],
		"param" : [
		],
		"paramcall" : [
		],
		"returnval" : [
			["{}","[ 空对象 ]"]
		],
		"info" : [
			"_.broken　是一个对象指针，指向一个空的对象，此对象不会被GC,用于空指向和比较"
		],
		"infowarning":[
		],
		"example":[
		]
	},

	"_.loop" : {
		"toptitle" : ["_.loop","_.foreach"],
		"api" : [
			"_.loop(list,callback(val,index,list),context)",
			"_.foreach(list,callback(val,index,list),context)"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["callback","[ 类型:Function ]"],
			["context","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
			["val","[ list 每次遍历返回的值 ]"],
			["index","[ list 每次遍历返回的key或者index ]"],
			["list","[ 指向list本身 ]"]
		],
		"returnval" : [
			["list",""]
		],
		"info" : [
			"_.loop同_.foreach，用于对象或者数组的循环"
		],
		"infowarning":[],
		"example":[
			{ 
				"info":"使用循环",
				"code":[
				"var num = 0;",
				"var list = [1,2,3,4];",
				"_.loop(list,function(val){",
  			"  num+=val;",
				"});",
				"console.log(num)",
				"",
				"var obj = { a:1,b:3,c:3 };",
				"_.loop(obj,function(val){",
				"  num+=val;",
				"});",
				"console.log(num)"
				],
				"result":[
					"10",
					"16"
				]
			},
			{ 
				"info":"叠加 index 或者 key",
				"code":[
				"var str = 'call - ';",
				"",
				"var obj = { a:1,b:2,c:3 };",
				"_.loop(obj,function(val,key){",
				"  str+= key + ' '",
				"});",
				"",
				"console.log(str)"
				],
				"result":[
					"call - a b c"
				]
			},
			{ 
				"info":"改变回调的this指向",
				"code":[
				"var obj = { a:1,b:2,c:3 };",
				"_.loop(obj,function(val,key){ ",
				" console.log(key+this);",
				"},' is sb');"
				],
				"result":[
				"a is sb",
				"b is sb",
				"c is sb"
				]
			}
		]
	},

	"_.keys" : {
		"toptitle" : ["_.keys"],
		"api" : [
			"_.keys(varible)"
		],
		"param" : [
			["varible","[ 类型:非null类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["[key,key1,...]","[ 包含参数对象或者数组中所有的key或index的数组 ]"]
		],
		"info" : [
			"_.keys 整合出对象和键，或者数组的下标(index)，作为数组返回"
		],
		"infowarning":[
			"当对象中有属性的enumerable被设置为false时(非枚举属性),则该属性不会在返回数组中"
		],
		"example":[
			{ 
				"info":"整合出对象的键 ",
				"code":[
				"console.log(_.keys({ a:1,b:2 }))"
				],
				"result":[
					"['a','b']"
				]
			},
			{ 
				"info":"整合出数组的下标 ",
				"code":[
				"console.log(_.keys([5,5,5,5,5]))"
				],
				"result":[
					"[0,1,2,3,4]"
				]
			},
			{ 
				"info":"非枚举属性不会被返回 ",
				"code":[
				"var o = { a:1,c:2 }",
				"_.define(o,'b',{",
				"  value:'?',",
				"  enumerable:false",
				"});",
				"",
				"//属性已经存在但不会被枚举",
				"console.log(o.b);",
				"console.log(_.keys(o));"
				],
				"result":[
				"?",
				"['a','c']"
				]
			}
		]
	},

	"_.slice" : {
		"toptitle" : ["_.slice"],
		"api" : [
			"_.slice(varible)"
		],
		"param" : [
			["varible","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["[val,val1,...]","[ 被复制的数组，或者空数组 ]"]
		],
		"info" : [
			"_.slice 通常用于拷贝数组,或者将非真实数组伪数组类型转化成真实的数组(如NodeList对象,Arguments对象)",
			"如果参数不是一个数组或者不是一个类数组,则返回值均为一个空的数组"
		],
		"infowarning":[],
		"example":[
			{ 
				"info":"拷贝数组的必要性",
				"code":[
				"var a = [1,2,3];",
				"var b = a;",
				"b[0] = 8;",
				"//此时a数组的值已经发生了改变",
				"console.log(a[0])",
				"console.log(b[0])",
				"",
				"var c = [1,2,3];",
				"var d = _.slice(c);",
				"d[0] = 9;",
				"//被复制的数组则不会修改原数组的值",
				"console.log(c[0])",
				"console.log(d[0])"
				],
				"result":[
					"8",
					"8",
					"1",
					"9"
				]
			},
			{ 
				"info":"参数无意义",
				"code":[
				"console.log(_.slice({}))",
				"console.log(_.slice(''))",
				"console.log(_.slice(321))",
				"console.log(_.slice(null))",
				"console.log(_.slice())"
				],
				"result":[
					"[]",
					"[]",
					"[]",
					"[]",
					"[]"
				]
			}
		]
	},

	"_.splice" : {
		"toptitle" : ["_.splice"],
		"api" : [
			"_.splice(list,index_key,offset)"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["index_key","[ 类型:Number,String ]"],
			["offset","[ 类型:Number ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["list","[ 返回参数list本身 ]"]
		],
		"info" : [
			"_.splice用于剔除掉数组中元素,或者删除掉对象中某个键值对",
			"此操作直接作用参数list,执行之后list被修改"
		],
		"infowarning":[
		],
		"example":[
			{ 
				"info":"删除数组中的元素，或者对象中的键值对",
				"code":[
				"var a = [1,2,3];",
				"_.splice(a,0);",
				"console.log(a)",
				"",
				"var b = [3,2,'?',2];",
				"_.splice(b,0,2);",
				"console.log(b)",
				"",
				"var o = { a:1,b:2 };",
				"_.splice(o,'a');",
				"console.log(o)"
				],
				"result":[
				"[2,3]",
				"['?',2]",
				"{b:2}"
				]
			}
		
		]
	},

	"_.pop" : {
		"toptitle" : ["_.pop"],
		"api" : [
			"_.pop(arr)"
		],
		"param" : [
			["arr","[ 类型:Array ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["arr 或 pop-elm","[ 返回被弹出的元素，或者是参数arr本身 ]"]
		],
		"info" : [
			"_.pop用于将数组末尾的元素弹出,执行成功后直接导致原数组被修改",
			"如果参数不是数组(非法)，则返回此参数"
		],
		"infowarning":[
			"可用于模拟堆栈"
		],
		"example":[
			{ 
				"info":"弹出数组末尾的元素",
				"code":[
				"var a = [1,2,3,4];",
				"console.log(_.pop(a))",
				"//原数组已经被修改",
				"console.log(a)"
				],
				"result":[
				"4",
				"[1,2,3]"
				]
			}
		
		]
	},

	"_.shift" : {
		"toptitle" : ["_.shift"],
		"api" : [
			"_.shift(arr)"
		],
		"param" : [
			["arr","[ 类型:Array ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["arr 或 shift-elm","[ 返回被弹出的元素，或者是参数arr本身 ]"]
		],
		"info" : [
		"_.shift用于将数组的第一个元素弹出,执行成功后直接导致原数组被修改",
		"如果参数不是数组(非法)，则返回此参数"
		],
		"infowarning":[
			"可用于模拟队列"
		],
		"example":[
			{ 
				"info":"弹出数组首个元素",
				"code":[
				"var a = [1,2,3,4];",
				"console.log(_.shift(a))",
				"//原数组已经被修改",
				"console.log(a)"
				],
				"result":[
					"1",
					"[2,3,4]"
				]
			}
		
		]
	},

	"_.push" : {
		"toptitle" : ["_.push"],
		"api" : [
			"_.push(arr,val1,val2,...)"
		],
		"param" : [
			["arr","[ 类型:Array ]"],
			["val","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["arr","[ 参数arr本身 ]"]
		],
		"info" : [
			"_.push用于将数组末尾添加新的元素,执行成功后直接导致原数组被修改",
			"如果参数不是数组(非法)，则返回此参数"
		],
		"infowarning":[],
		"example":[
			{ 
				"info":"数组末尾新增元素",
				"code":[
				"console.log(_.push([1,2,3,4],1,2,3))"
				],
				"result":[
					"[1,2,3,4,1,2,3]"
				]
			}
		
		]
	},

	"_.unshift" : {
		"toptitle" : ["_.unshift"],
		"api" : [
			"_.unshift(arr,val1,val2,...)"
		],
		"param" : [
			["arr","[ 类型:Array ]"],
			["val","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["arr","[ 参数arr本身 ]"]
		],
		"info" : [
			"_.unshift用于将数组起始位置添加新的元素,执行成功后直接导致原数组被修改",
			"如果参数不是数组(非法)，则返回此参数"
		],
		"infowarning":[],
		"example":[
			{ 
				"info":"数组起始位置新增元素",
				"code":[
				"console.log(_.unshift([1,2,3,4],1,2,3))"
				],
				"result":[
					"[1,2,3,1,2,3,4]"
				]
			}
		
		]
	},

	"_.clone" : {
		"toptitle" : ["_.clone"],
		"api" : [
			"_.clone(varible)"
		],
		"param" : [
			["varible","[ 类型:Array,Object,Number,String ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["clone Object","[ 克隆对象 ]"]
		],
		"info" : [
			"_.clone用于浅拷贝数组或者对象,内置使用了原生JSONAPI,",
			"深拷贝可以查看 _.clonedoom"
		],
		"infowarning":[
			"浅拷贝对象 拷贝会自动将Function类型的变量给省略掉"
		],
		"example":[
			{ 
				"info":"拷贝对象,数组",
				"code":[
				"var fn = function(){};",
				"var a = {a:1,b:2,c:fn};",
				"var b = _.clone(a);",
				"var c = [3,2,1]",
				"var d = _.clone(c);",
				"",
				"console.log(b===a);",
				"//浅拷贝自动省略了Function类型的数值",
				"console.log(b.c);",
				"console.log(b);",
				"console.log(c===d);",
				"console.log(d);"
				],
				"result":[
				"&gt;  false",
				"&gt;  undefined",
				"&gt;  {a:1,b:2}",
				"&gt;  false",
				"&gt;  [3,2,1]"
				]
			}
		
		]
	},

	"_.clonedoom" : {
		"toptitle" : ["_.clonedoom"],
		"api" : [
			"_.clonedoom(varible)"
		],
		"param" : [
			["varible","[ 类型:Array,Object,Number,String ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["clone Object","[ 克隆对象 ]"]
		],
		"info" : [
			"_.clonedoom用于深度拷贝数组或者对象,",
			"deeping clone 由于递归性能上不如浅拷贝，拷贝出来的对象实例内所有内容完全不等于原对象(function除外)",
			"快速数据浅拷贝可以查看 _.clone"
		],
		"infowarning":[
		],
		"example":[
			{ 
				"info":"深度拷贝对象,数组",
				"code":[
				"var fn = function(){};",
				"var a = {a:1,b:2,c:fn,d:{ s:1,b:2 }};",
				"var b = _.clonedoom(a);",
				"",
				"console.log(b);",
				"console.log(b===a);",
				"console.log(typeof b.c === 'function')",
				"console.log(b.c===fn);",
				"console.log(a.d===b.d);"
				],
				"result":[
				"&gt;  {a: 1, b: 2, c: fn, d: { s:1,b:2 }};",
				"&gt;  false",
				"&gt;  true",
				"&gt;  true",
				"&gt;  false"
				]
			}
		
		]
	},

	"_.sort" : {
		"toptitle" : ["_.sort"],
		"api" : [
			"_.sort(arr,func)"
		],
		"param" : [
			["arr","[ 类型:Array ]"],
			["func","[ 类型:Function ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["arr","[ 返回被排序过的arr，或者是参数arr本身 ]"]
		],
		"info" : [
			"_.sort方法对数组进行排序，func参数是可选的，不传入的话则会导致js使用其默认的排序规则",
			"方法执行成功后会立马修改arr原数组",
			"当arr参数非法时，则会返回arr本身"
		],
		"infowarning":[],
		"example":[
			{ 
				"info":"对数值进行由小到大排序",
				"code":[
				"var a = [31,12,1,2,23,4,15,66,3,9,84,200,8,68]",
				"_.sort(a,function(n,m){ return n-m; })",
				"",
				"console.log(a)"
				],
				"result":[
					"[1,2,3,4,8,9,12,15,23,31,66,68,84,200]"
				]
			}
		
		]
	},

	"_.unique" : {
		"toptitle" : ["_.unique"],
		"api" : [
			"_.unique(arr)"
		],
		"param" : [
			["arr","[ 类型:Array ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["arr","[ 返回被去重的arr，或者是参数arr本身 ]"]
		],
		"info" : [
			"_.unique 去重算法，将数组中的重复值剔除掉，不受到类型的影响",
			"方法执行成功后会立马修改arr原数组"
		],
		"infowarning":[],
		"example":[
			{ 
				"info":"去除数组中重复的元素",
				"code":[
				"var ao = { x:'?' };",
				"var fn = function(){};",
				"var a = [5,1,2,10,ao,4,fn,'10',4,fn,'1',6,8,4,ao,'21',1,3,fn,2,10,3,8,9,21,ao,8,fn,7,'2',4,'1']",
				"_.unique(a);",
				"console.log(a)"
				],
				"result":[
					"[5, 1, 2, 10, ao, 4, fn, '10', '1', 6, 8, '21', 3, 9, 21, 7, '2']"
				]
			}
		
		]
	},

	"_.filter" : {
		"toptitle" : ["_.filter","_.find"],
		"api" : [
			"_.filter(list,idf(val,index,list))",
			"_.find(list,idf(val,index,list))"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["idf","[ 类型:Function ]"]
		],
		"paramcall" : [
			["val","[ list 每次遍历返回的值 ]"],
			["index","[ list 每次遍历返回的key或者index ]"],
			["list","[ 指向list本身 ]"]
		],
		"returnval" : [
			["filter array","[ 无论参数list是对象，还是数组，返回结果都是一个包含了过滤条件过滤的数值集合数组 ]"]
		],
		"info" : [
			"_.filter 等同于 _.find, 用于对象或者数组的筛选,满足筛选条件的结果作为返回",
			"与 _.reject 完全相反"
		],
		"infowarning":[],
		"example":[
			{ 
				"info":"使用筛选函数",
				"code":[
				"var list = [1,2,3,4,5,6];",
				"//筛选出是偶数的值",
				"var evenlist = _.filter(list,function(val){",
				"  return val%2===0; ",
				"});",
				"",
				"console.log(evenlist)",
				"",
				"var obj = { a:1,b:2,c:3,d:4,e:5,f:6 };",
				"//筛选出是奇数的值",
				"var oddlist = _.find(obj,function(val){",
				"  return val%2;",
				"});",
				"",
				"console.log(oddlist)"
				],
				"result":[
					"[2,4,6]",
					"[1,3,5]"
				]
			}
		
		]
	},

	"_.reject" : {
		"toptitle" : ["_.reject"],
		"api" : [
			"_.reject(list,idf(val,index,list))"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["idf","[ 类型:Function ]"]
		],
		"paramcall" : [
			["val","[ list 每次遍历返回的值 ]"],
			["index","[ list 每次遍历返回的key或者index ]"],
			["list","[ 指向list本身 ]"]
		],
		"returnval" : [
			["reject array","[ 无论参数list是对象，还是数组，返回结果都是一个包含了不满足过滤条的数值集合数组 ]"]
		],
		"info" : [
			"用于对象或者数组的筛选,不满足筛选条件的结果作为返回",
			"与 _.filter 完全相反"
		],
		"infowarning":[],
		"example":[
			{ 
				"info":"使用筛选函数",
				"code":[
				"var list = [1,2,3,4,5,6];",
				"var oddlist = _.reject(list,function(val){",
				"  return val%2===0; ",
				"});",
				"",
				"console.log(oddlist)",
				"",
				"var obj = { a:1,b:2,c:3,d:4,e:5,f:6 };",
				"//筛选条件,如果是奇数则满足，所以奇数的值需要被过滤掉,偶数才是返回结果",
				"var evenlist = _.reject(obj,function(val){",
				"  return val%2;",
				"});",
				"",
				"console.log(evenlist)"
				],
				"result":[
					"[1,3,5]",
 					"[2,4,6]"
				]
			}
		
		]
	},

	"_.map" : {
		"toptitle" : ["_.map"],
		"api" : [
			"_.map(list,callback(val,index,list))"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["callback","[ 类型:Function ]"]
		],
		"paramcall" : [
			["val","[ list 每次遍历返回的值 ]"],
			["index","[ list 每次遍历返回的key或者index ]"],
			["list","[ 指向list本身 ]"]
		],
		"returnval" : [
			["list","参数list"]
		],
		"info" : [
			"_.map使用映射的方式修改了原数组或者对象的数值",
			"执行成功则会立马修改原来的数组或对象"
		],
		"infowarning":[],
		"example":[
			{ 
				"info":"数组和对象的映射修改 ",
				"code":[
				"var a = [0,1,2,3,4];",
				"var o = { a:1,b:2,c:3 };",
				"",
				"_.map(a,function(val){",
				"  return val+1;",
				"});",
				"",
				"_.map(o,function(val){",
				"  return val*2;",
				"});",
				"",
				"console.log(a)",
				"console.log(o)"
				],
				"result":[
					"[1,2,3,4,5]",
					"{a:2,b:4,c:6}"
				]
			}
		
		]
	},

	"_.cat" : {
		"toptitle" : ["_.cat"],
		"api" : [
			"_.cat(list,callback(val,index,list))"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["callback","[ 类型:Function ]"]
		],
		"paramcall" : [
			["val","[ list 每次遍历返回的值 ]"],
			["index","[ list 每次遍历返回的key或者index ]"],
			["list","[ 指向list本身 ]"]
		],
		"returnval" : [
			["cat list","[ 被裁剪的数值,作为数组返回 ]"]
		],
		"info" : [
			"_.cat本质上和_.splice大同小异,都是删除掉数组和对象中的元素",
			"而_.cat提供一个筛选函数，满足条件的值将会从数组或对象中被剔除，并且转移到返回结果中",
			"执行成功则会立马修改原来的数组或对象"
		],
		"infowarning":[],
		"example":[
			{ 
				"info":"裁剪掉数组中的偶数，裁剪掉对象中的奇数",
				"code":[
				"var a = [1,2,3,4,5,6];",
				"var o = { a:1,b:2,c:3,d:4,e:5,f:6 };",
				"",
				"var as = _.cat(a,function(val){",
				"  return val%2===0;",
				"});",
				"",
				"var os = _.cat(o,function(val){",
				"  return val%2;",
				"});",
				"",
				"console.log(a)",
				"//被裁剪出来的部分",
				"console.log(as)",
				"",
				"console.log(o)",
				"//被裁剪出来的部分",
				"console.log(os)"
				],
				"result":[
				"&gt;  [1,3,5]",
				"&gt;  [2,4,6]",
				"&gt;  {b:2,d:4,f:6}",
				"&gt;  [{a:1},{c:3},{e:5}]"
				]
			}
		
		]
	},


	"_.hook" : {
		"toptitle" : ["_.hook"],
		"api" : [
			"_.hook(list,callback(args,...),args,args1,...)"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["callback","[ 类型:Function,String ]"],
			["args","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
			["args","[ 指向 _.hook 第三参数之后所有的参数会被传递到这个回调中供使用 ]"]
		],
		"returnval" : [
			["hook list","[ 修改之后的list值 ]"]
		],
		"info" : [
			"_.hook提供了一种高级的映射方式，构建于 _.map 之上的一层封装，使用映射的方式修改了原数组或者对象的数值",
			"执行成功则会立马修改原来的数组或对象"
		],
		"infowarning":[],
		"example":[
			{ 
				"info":"数组和对象的映射修改",
				"code":[
				"var a = ['cloud','is','your','god','!'];",
				"var o = {",
				"  a:[1],",
				"  b:[1,2],",
				"  c:[1,2,3],",
				"  d:[1,2,3,4],",
				"  e:[1,2,3,4,5]",
				"}",
				"",
				"_.hook(a,function(sharp,at){",
				"  return this+sharp+at;",
				"},'#','@');",
				"",
				"_.hook(o,'toString');",
				"",
				"console.log(a)",
				"console.log(o)"
				],
				"result":[
					"&gt;  ['cloud#@', 'is#@', 'your#@', 'god#@', '!#@']",
					"&gt;  {a: '1', b: '1,2', c: '1,2,3', d: '1,2,3,4', e: '1,2,3,4,5'}"
				]
			}
		
		]
	},

	"aix.model" : {
		"toptitle" : ["aix.model"],
		"api" : [
			"aix.model(setting)"
		],
		"param" : [
			["setting","[ 类型:Object ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["model","实例化的aix.model数据模型"]
		],
		"info" : [
			"aix.model 是 aix 框架中模型的基础构造函数",
			"使用new 关键字可以创建一个新的aix.model数据模型",
			"aix.model模型作为一个数据容器,可以很好的将数据管理起来",
			"并且提供不同的Events和API,方便数据处理"
		],
		"infowarning":[
			"构造函数 aix.model"
		],
		"example":[
			{ 
				"info":"创建一个模型",
				"code":[
				"var model = new aix.model({",
				"  data:[1,2,3]",
				"});",
				"",
				"console.log(model);",
				"console.log(model.parse());"
				],
				"result":[
					"aix.model( data : [1,2,3] , change : false ...)",
					"[1,2,3]"
				]
			}
		
		]
	},

	"aix.model.parse" : {
		"toptitle" : ["aix.model - [ parse ]"],
		"api" : [
			"model.parse()"
		],
		"param" : [
			["无",""]
		],
		"paramcall" : [
		],
		"returnval" : [
			["model data"," 模型数据"]
		],
		"info" : [
			"实例化的model可以调用parse方法来安全返回模型中的数据"
		],
		"infowarning":[
			"虽然,直接访问model.data可以获取到模型的数据,但是我们不推荐这样的做法",
			"由于Js中的对象是指针,我们尽量使用parse()方法来返回模型的安全数据,防止外部逻辑轻易的修改了模型的数据(model.data)"
		],
		"example":[
			{ 
				"info":"获取模型中的数据",
				"code":[
				"var m = new aix.model({",
				"  data : {",
				"   a : 1,",
				"   b : 2",
				"  }",
				"});",
				"",
				"console.log(m.parse())"
				],
				"result":[
					"{a:1,b:2}"
				]
			}
		
		]
	},

	"aix.model.get" : {
		"toptitle" : ["aix.model - [ get ]"],
		"api" : [
			"model.get(arg)"
		],
		"param" : [
			["arg","[ 类型:String,Number]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["value 或者 model.data","[ 返回模型数据中某个值, 也可能返回整个模型 ]"]
		],
		"info" : [
			"模型的get方法主要用途是用来获取单个数据"
		],
		"infowarning":[
			"当属性不存在时,则会返回一个空的字符串",
			"适用于模型数据为对象或者数组"
		],
		"example":[
			{ 
				"info":"获取模型数据的一条数据",
				"code":[
				"var m = new aix.model({",
				"  data:{",
				"    s:1,",
				"    b:2",
				"  }",
				"})",
				"",
				"console.log(m.get('b'))",
				"//不存在的属性",
				"console.log(m.get('c'))"
				],
				"result":[
					"2",
					"''"
				]
			}
		
		]
	},

	"aix.model.set" : {
		"toptitle" : ["aix.model - [ set ]"],
		"api" : [
			"model.set(data)",
			"model.set(key,value)"
		],
		"param" : [
			["data","[ 类型:任意类型 ]"],
			["key","[ 类型:String,Number ]"],
			["value","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["model","this模型自身"]
		],
		"info" : [
			"修改模型的data数据,或者修改模型数据中的某条数据",
			"如果模型设置了validate函数,则会对设置的数据进行校验,触发相应的事件, 详情查看 aix.model - validate"
		],
		"infowarning":[
			"设置数据最好使用set方法,只要data数据被改变(通过验证).则会触发change事件,详情查看 aix.model - events"
		],
		"example":[
			{ 
				"info":"设置模型数据",
				"code":[
				"var m = new aix.model({",
				"  data : {",
				"    a:1,",
				"    b:2",
				"  }",
				"});",
				"",
				"m.set('b',4);",
				"console.log(m.get('b'));",
				"",
				"m.set({ a:2,c:6 });",
				"console.log(m.get('b'));",
				"console.log(m.parse());"
				],
				"result":[
					"4",
					"''",
					"{ a:2,c:6 }"
				]
			}
		
		]
	}

}

